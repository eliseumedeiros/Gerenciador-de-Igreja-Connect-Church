package Objetos;
// Generated 03/06/2016 10:35:37 by Hibernate Tools 4.3.1


import Util.FormatoDataHora;
import Util.HibernateUtil;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Turma generated by hbm2java
 */
public class Turma  implements java.io.Serializable {
     private TurmaId id;
     private Disciplina disciplina;
     private Membro membro;
     private Date dataFim;
     private Set matriculas = new HashSet(0);
     private final static float NOTA_DE_CORTE = 6.0f;

    public Turma() {
    }

    public Turma(Date dataInicio, Disciplina disciplina, Membro membro, Date dataFim) {
        id.setCodigo(disciplina.getCodigo());
        this.id.setDataInicio(dataInicio);
        this.disciplina = disciplina;
        this.membro = membro;
        this.dataFim = dataFim;
    }
    public Turma(Date dataInicio, Disciplina disciplina, Membro membro, Date dataFim, Set matriculas) {
       id.setCodigo(disciplina.getCodigo());
       this.id.setDataInicio(dataInicio);
       this.disciplina = disciplina;
       this.membro = membro;
       this.dataFim = dataFim;
       this.matriculas = matriculas;
    }
   
    public TurmaId getId() {
        return this.id;
    }
    
    public void setId(TurmaId id) {
        this.id = id;
    }
    public Disciplina getDisciplina() {
        return this.disciplina;
    }
    
    public void setDisciplina(Disciplina disciplina) {
        this.disciplina = disciplina;
        this.id.setCodigo(disciplina.getCodigo());
    }
    public Membro getMembro() {
        return this.membro;
    }
    
    public void setMembro(Membro membro) {
        this.membro = membro;
    }
   
    public Date getDataFim() {
        return this.dataFim;
    }
    
    public void setDataFim(Date dataFim) {
        this.dataFim = dataFim;
    }
    public Set getMatriculas() {
        return this.matriculas;
    }
    
    public void setMatriculas(Set matriculas) {
        this.matriculas = matriculas;
    }

    /////////////////////////////////////////////////////////////

    public static Turma preencherDadosTurma(Object[] object, int index){
        Turma turma = new Turma();
        turma.setId(new TurmaId((String)object[index],(Date)object[index+1]));
        turma.setDataFim((Date)object[index+2]);
        //turma.setPeriodoLetivo(new PeriodoLetivo());
        return turma;
    }
    
    public static List<Turma> preencherDadosTurma(List<Object[]> objects, int index){
        List<Turma> turmas = new ArrayList();
        for(Object[] obj: objects){
            turmas.add(preencherDadosTurma(obj, index));
        }
        return turmas;
    }
    
    public static void cadastrarOuAtualizarTurma(Disciplina disciplina, Membro professor, Date dataInicio, Date dataFim) throws Exception{
        Turma turma = new Turma(dataInicio, disciplina, professor, dataFim);
        HibernateUtil.persistirObjeto(turma);
    }

    public static void cadastrarOuAtualizarTurma(Turma turma) throws Exception{
        HibernateUtil.persistirObjeto(turma);
    }
    
    public static void deletarTurma(Turma turma) throws Exception{
        HibernateUtil.deletarObjeto(turma);
    }
    
    public static List<Turma> listarTodos(){
        List<Object[]> objects = HibernateUtil.getTuplasDaTabela("turma", "", "data_inicio ASC, cod_disc ASC", 0);
        return preencherDadosTurma(objects, 0);
    }
    
    public static Turma selectTurmaPk(String codigo, Date dataInicio){
        List<Object[]> objects = HibernateUtil.getTuplasDaTabela("Turma", "cod_disc='"+codigo+"' and data_inicio='"+FormatoDataHora.sqlData(dataInicio)+"'", "", 0);
        return preencherDadosTurma(objects.get(0),0);
    }
    
    public static Turma selectTurmaPk(TurmaId turmaId){
        List<Object[]> objects = HibernateUtil.getTuplasDaTabela("Turma", "cod_disc='"+turmaId.getCodigo()+"' and data_inicio='"+FormatoDataHora.sqlData(turmaId.getDataInicio())+"'", "", 0);
        return preencherDadosTurma(objects.get(0),0);
    }
    
    public static List<Turma> selectTurmasPorAnoLetivo(int anoLetivo){
        List<Object[]> objects = HibernateUtil.getTuplasDaTabela("turma", "data_inicio like '"+anoLetivo+"-__-__", "", 0);
        return preencherDadosTurma(objects, 0);
    }
        
    public void adicionarAluno(Membro membro) throws Exception{
        Matricula matricula = new Matricula(membro,this);
        Matricula.cadastrarMatricula(matricula);
    }
    
    public void removerAluno(Membro membro) throws Exception{
        Matricula matricula = new Matricula(membro,this);
        Matricula.deletarMatricula(matricula);
    }
    
    public List<Membro> getListaDeAlunos(){
        String codigo = this.id.getCodigo();
        String dataInicio = FormatoDataHora.sqlData(this.id.getDataInicio());
        List<Object[]> objects = HibernateUtil.rodarSQL("SELECT *\n" +
"	FROM pessoa natural join membro\n" +
"    WHERE id IN (\n" +
"    SELECT id \n" +
"		FROM matricula join membro on id = id_aluno\n" +
"        WHERE cod_disc = '"+codigo+"' and data_inicio = '"+dataInicio+"'\n" +
"    )");
        return Membro.preencherDadosMembro(objects, 0);
    }
    
    public String getSituacaoAcademica(Membro membro){
        boolean fim,notaBoa = false, assiduo;
        Matricula matricula = Matricula.selectMatriculaPk(membro.getId(), this.getId().getCodigo(), this.getId().getDataInicio());
        if (matricula.getNotaFinal() != null){
            fim = true;
            notaBoa = matricula.getNotaFinal() >= NOTA_DE_CORTE;
        }
        else{
            fim = false;
        }
        System.out.println("select count(presenca), count(case when presenca=true then 1 end)\n" +
"	from turma t, matricula m, assiduidade a\n" +
"    where t.cod_disc=m.cod_disc and t.data_inicio = m.data_inicio and m.cod_disc = a.codigo \n" +
"    and m.data_inicio = a.data_inicio and m.id_aluno ="+ membro.getId()+ " and t.cod_disc='"+this.getId().getCodigo() +"' and t.data_inicio = '"+FormatoDataHora.sqlData(this.getId().getDataInicio())+"'");

        List<Object[]> objects = HibernateUtil.rodarSQL("select count(presenca), count(case when presenca=true then 1 end)\n" +
"	from turma t, matricula m, assiduidade a\n" +
"    where t.cod_disc=m.cod_disc and t.data_inicio = m.data_inicio and m.cod_disc = a.codigo \n" +
"    and m.data_inicio = a.data_inicio and m.id_aluno ="+ membro.getId()+ " and t.cod_disc='"+this.getId().getCodigo() +"' and t.data_inicio = '"+FormatoDataHora.sqlData(this.getId().getDataInicio())+"'");
        java.math.BigInteger presencas = (java.math.BigInteger)objects.get(0)[1];
        java.math.BigInteger numAulas = (java.math.BigInteger)objects.get(0)[0];
        float porcentagem = (float) presencas.intValue()/ numAulas.intValue();
        assiduo = porcentagem >= 0.75; 
        if (fim){
            if (assiduo && notaBoa){
                return "Aprovado";
            }
            else{
                return "Reprovado";
            }
        }
        else{
            return "Matriculado";
        }
    }
}


